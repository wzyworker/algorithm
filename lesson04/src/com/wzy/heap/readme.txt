完全二叉树：
    以数组形式表示时有(对于每个位置 i（从 0 开始）):
        左子节点：2 * i + 1
        右子节点：2 * i + 2
        父节点：(i - 1) / 2
    从 1 开始有：
        左子节点：2 * i
        右子节点：2 * i + 1
        父节点：i / 2

堆：
    首先是一个完全二叉树，但又可分为大根堆和小根堆
    大根堆，任何一颗子树的头结点都是子树上的最大值
    小根堆，任何一颗子树的头结点都是子树上的最小值

    插入一个新节点时，和自己的父节点比较，替换或者不动，顺序往上即可调整完毕

    删除最大值时，如何调整？
        最开始的位置和末尾位置交换，将heapSize - 1，从上往下调整

    堆排序：
        不断地heapify,将最大值放到最后面

    建立大根堆得优化:
        一次性给了一个数组，想象成一个完全二叉树，从最后一行开始，判断每个节点为头时，子树是否为大根堆，依次调整

    应用：
        1.一个几乎有序的数组，进行排序（每个位置移动的距离不会超过 k）
            建立大小为 k + 1 的小根堆，将0 ~ k的数放入小根堆当中，弹出一个数，放入下一个数